import filesystem from "./filesystem.js";
import { bindButton } from "./binder.js";
import { logVerbose } from "./logger.js";
import chalk from "chalk";

export async function compile(project) {
    logVerbose(`Compiling project ${project.id}`);
    logVerbose(`Loading customFS`);
    let projectfs = new filesystem(project);

    // compile and bind buttons
    project.buttons.forEach(button => {
        logVerbose(`Proccessing triggers for button ${button.id}`);
        if (button.type === "command") {
            // Since this is an executable command, we need to make sure to compile it to a cmd file.
            logVerbose(`Compiling button action for ${button.id}`);
            projectfs.writeFile(button.id + ".cmd", compileCommand(button.action));
        }
        bindButton(project, button);
    });

    projectfs.saveManifest();
    console.log(chalk.green("Project compiled successfully"));
}

export default function compileCommand(command) {
    let script = [];
    script.push("@echo off");
    script.push(":: Generated by Microart Menuify");
    script.push(":: DO NOT EDIT THIS FILE");

    // script setup
    script.push("if exist %1% (");
    script.push("\t:: Menuify variables");
    script.push("\tset filename=%1%");
    script.push("\tset filenameWE=");
    script.push("\tfor %%a in (%filename%) do (@set filenameWE=%%~na)");

    // command to execute
    script.push("\t" + command.replaceAll("{filename}", "%filename%").replaceAll("{filenameWE}", "%filenameWE%"));

    script.push(")");

    return script.join("\n");
}